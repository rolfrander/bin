#!/usr/bin/perl

use Getopt::ArgParse;
use Net::Ping;
use Time::HiRes qw(time usleep);
use POSIX qw(strftime floor ceil);
use feature 'unicode_strings';
use utf8;
binmode(STDOUT, "encoding(UTF-8)");

$ap = Getopt::ArgParse->new_parser(
       description => 'Report wifi status on Mac OSX',
       epilog      => 'For help on debugging wifi issues, please see: https://apple.stackexchange.com/questions/263638'
);

$ap->add_arg('--run', '-r', type => 'Bool', help => 'Keep running, print info each second');
$ap->add_arg('--ping', '-p', type => 'Scalar', help => 'Ping the given IP-address using TCP SYN', metavar => 'IP');
$ap->add_arg('--graph', '-g', type => 'Bool', help => 'Show S/N-ratio as a graph');
$ap->add_arg('--interval', '-i', type => 'Scalar', help => 'Ping interval', metavar => 'seconds', default => 1);
$opts=$ap->parse_args(@ARGV);

$repeat = $opts->run;
$graph  = $opts->graph;
$interval = 1000000*(0.0 + $opts->interval);

$g_min = 14; # lowest value on graph
$g_max = 38;# highest value on graph
$g_width = 12; # output width, characters

$p_min = 0; # lowest value on graph
$p_max = 10;# highest value on graph
$p_width = 10; # output width, characters


@graphchar = (
" ",
"\N{U+258f}",
"\N{U+258e}",
"\N{U+258d}",
"\N{U+258c}",
"\N{U+258b}",
"\N{U+258a}",
"\N{U+2589}",
"\N{U+2588}"
);

sub graph {
  my ($sn, $min, $max, $width) = @_;
  $sn = ($sn < $min) ? $min : $sn;
  $sn = ($sn > $max) ? $max : $sn;
  $sn -= $min;
  $sn *= $width/($max-$min);;
  my $left = floor($sn);
  my $right = $width-$left-1;
  my $frac = int(($sn-$left)*8+0.5);
  my $frac_char = ($left<$width) ? $graphchar[$frac] : "";
  return sprintf("[%s%s%s]",
                 $graphchar[8] x $left,
                 $frac_char,
                 $graphchar[0] x $right);
}

if($opts->ping) {
  $p = Net::Ping->new("syn");
  $p->port_number(443);
  $p->hires();
}

do {
  $t = time;

  open(AIRPORT, "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I |");

  while(<AIRPORT>) {
    if(/agrCtlRSSI: (-?\d+)/) { $signal = $1;}
    if(/agrCtlNoise: (-?\d+)/){ $noise = $1;}
    if(/lastTxRate: (\d+)/)   { $lastrate = $1;}
    if(/maxRate: (\d+)/)      { $rate = $1;}
    if(/BSSID: ([0-9a-f:]+)/) {
      $BSSID = $1;
      $ap = $BSSID;
      if($BSSID =~ /1d:bd:28$/) { $ap="ap-trapp-2.4" ;}
      if($BSSID =~ /1d:bd:29$/) { $ap="ap-trapp-5" ;}
      if($BSSID =~ /1d:bd:16$/) { $ap="ap-stue-2.4" ;}
      if($BSSID =~ /1d:bd:17$/) { $ap="ap-stue-5" ;}
      if($BSSID =~ /1d:bd:60$/) { $ap="ap-soverom-2.4" ;}
      if($BSSID =~ /1d:bd:61$/) { $ap="ap-soverom-5" ;}
      if($BSSID =~  /b:6c:4e$/) { $ap="ap-kontor-2.4" ;}
      if($BSSID =~  /b:6c:50$/) { $ap="ap-kontor-5" ;}
    }
    if(/SSID: (.*)/) { $ssid = $1; }
  }

  close(AIRPORT);

  if($opts->ping) {
    $p->ping($opts->ping);
    if (($host,$rtt,$ip) = $p->ack) {
      $pingtime = $rtt*1000;
    } else {
      $pingtime = -1;
      # reset ping client
      $p = Net::Ping->new("syn");
      $p->port_number(443);
      $p->hires();

    }
  }

  $date = strftime "%Y-%m-%d %H:%M:%S", localtime $t;
  $date .= sprintf ".%03d", ($t-int($t))*1000; # without rounding
  $sn = $signal-$noise;
  if($graph) {
    $sngraph = graph($sn, $g_min, $g_max, $g_width);
    $pinggraph = "";
    if($opts->ping) {
      $pinggraph = graph($pingtime, $p_min, $p_max, $p_width);
    }
    printf("%s SSID=%s AP=%s s/n=%i %s maxrate=%i lastrate=%i pingtime=%6.3f ms %s\n",
           $date, $ssid, $ap, $sn, $sngraph, $rate, $lastrate, $pingtime, $pinggraph);

  } else {
    printf("%s SSID=%s AP=%s s/n=%i maxrate=%i lastrate=%i pingtime=%.3f ms\n",
    $date, $ssid, $ap, $sn, $rate, $lastrate, $pingtime);
  }

} while($repeat && usleep($interval));
