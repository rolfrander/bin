#!/usr/bin/python3

import piexif
import inotify.adapters
import inotify.constants
import os.path
import os
import pwd
import grp
import argparse
import re
from datetime import date
import syslog
import daemon
from collections.abc import Iterable

class ImageMover:
    WRITE_MASK = inotify.constants.IN_CLOSE_WRITE | inotify.constants.IN_MOVED_TO

    re_date = re.compile("^(\d\d\d\d)-(\d\d)-(\d\d) ")
    dirmode = 0o775
    filemode = 0o444
    
    def __init__(self, target_directory):
        self.log_with_syslog = False
        self.target_directory = target_directory
        self.source_directories = []
        self.uid = -1
        self.gid = -1

    def set_uid(self, uid):
        self.uid = uid

    def set_gid(self, gid):
        self.gid = gid

    def add_source_directories(self, *dirs):
        for d in dirs:
            if isinstance(d, Iterable):
                self.source_directories += d
            else:
                self.source_directories.append(d)

    def initlog(self, use_syslog):
        self.log_with_syslog = use_syslog
        if self.log_with_syslog:
            syslog.openlog(ident="cpimg3", logoption=syslog.LOG_PID, facility=syslog.LOG_LOCAL0)
        else:
            print("logging to stdout")
        
    def log(self, message):
        if self.log_with_syslog:
            syslog.syslog(message)
        else:
            print(message)

    def makedirs(self, directory, mode):
        if os.path.exists(directory):
            if not os.path.isdir(directory):
                msg = "exists but is not a directory: {}".format(directory)
                self.log(msg)
                raise Exception(msg)
            return
        self.makedirs(os.path.dirname(directory), mode)
        base = os.path.basename(directory)
        if base:
            os.mkdir(directory, mode)
            os.chown(directory, self.uid, self.gid)

    def move(self, source, target):
        self.log("move {} to {}".format(source, target))
        self.makedirs(target, mode=ImageMover.dirmode)
    
        filename = os.path.basename(source).lower()
        dst = os.path.join(target, filename)

        if os.path.exists(dst):
            self.log("target exists: {}".format(dst))
        else:
            os.rename(source, dst)
            os.chown(dst, self.uid, self.gid)
            os.chmod(dst, ImageMover.filemode)
        
    def is_img(self, filename):
        if os.path.isfile(filename):
            filename_lower = filename.lower()
            return filename_lower.endswith(".jpg") or filename_lower.endswith(".cr2")
        return false

    def get_date_subdir(self,filename):
        # check exif-data
        try:
            image_data=piexif.load(filename)
            if 'Exif' in image_data:
                if piexif.ExifIFD.DateTimeOriginal in image_data['Exif']:
                    exifDate = image_data['Exif'][piexif.ExifIFD.DateTimeDigitized].decode("ASCII")
                    return "/".join(exifDate.split(" ")[0].split(":"))
        except:
            # could not load exif data, move on
            pass
    
        # if not, check filename
        basename = os.path.basename(filename)

        match = ImageMover.re_date.match(basename)
        if match:
            return "{}/{}/{}".format(match.group(1), match.group(2), match.group(3))

        # otherwise, check filesystem
        fileinfo = os.stat(filename)
        return date.fromtimestamp(fileinfo.st_mtime).strftime("%Y/%m/%d")

    def move_to_date(self, path, filename):
        fullpath = os.path.join(path, filename)
        if self.is_img(fullpath):
            self.move(fullpath, os.path.join(self.target_directory, self.get_date_subdir(fullpath)))
    
    def listen(self):
        self.log("listening in {}, moving to {}, for {}:{}". format(self.source_directories, self.target_directory, self.uid, self.gid))
        i = inotify.adapters.Inotify()
        
        for d in self.source_directories:
            i.add_watch(d)

        for event in i.event_gen(yield_nones=False):
            ((wd, mask, cookie, l), type_names, path, filename) = event
            # print("{}: {}/{}".format(type_names, path, filename))
            if (mask & ImageMover.WRITE_MASK) > 0:
                self.move_to_date(path, filename)
                
    def move_existing_files(self):
        for path in self.source_directories:
            for filename in os.listdir(path):
                self.move_to_date(path, filename)

def main(args):
    m = ImageMover(args.target_directory)
    m.initlog(args.daemon)
    if args.user:
        m.set_uid(pwd.getpwnam(args.user).pw_uid)
    if args.group:
        m.set_gid(grp.getgrnam(args.group).gr_gid)

    m.add_source_directories(args.source_directories)
    
    m.move_existing_files()
    m.listen()
    
p = argparse.ArgumentParser(description = "Listen for new files and move them to date-based directory structure")
p.add_argument('target_directory', metavar='target',              help='target directory')
p.add_argument('source_directories', metavar='source', nargs='+', help='directory to watch for files')
p.add_argument('-u', '--user',  metavar='user',                   help='username for files and directories in target structure')
p.add_argument('-g', '--group', metavar='group',                  help='group for files and directories in target structure')
p.add_argument('-d', '--daemon', action='store_const', default=False, const=True, help='Run in background')
args = p.parse_args()

if args.daemon:
    with daemon.DaemonContext():
        main(args)
else:
    main(args)
